using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static System.Console;

namespace ParticleCollider
{
    //Base class for all particles
    public class Particle
    {
        public string name { get; set; }
        public string symbol { get; set; }
        public double mass { get; set; }     //in MeV/c^2 (neutrino mass taken to be negligible)
        public double charge { get; set; }   //in eV
        public double baryonNumber { get; set; }
        public int charm { get; set; }
        public int strangeness { get; set; }
        public int topness { get; set; }
        public int bottomness { get; set; }
        public int leptonElNumber { get; set; }
        public int leptonMuNumber { get; set; }
        public int leptonTauNumber { get; set; }

        //Speed of light for use in calculations
        const double speedOfLight = 2.998e8;
                
        //Collision method
        public Particles CollideWith(Particle particle, Particles particles)
        {
            //Property totals for conservation laws
            var totalMass = particle.mass + this.mass;
            var totalCharge = particle.charge + this.charge;
            var totalBaryonNumber = particle.baryonNumber + this.baryonNumber;
            var totalCharm = particle.charm + this.charm;
            var totalStrangeness = particle.strangeness + this.strangeness;
            var totalTopness = particle.topness + this.topness;
            var totalBottomness = particle.bottomness + this.bottomness;
            var totalLeptonElNumber = particle.leptonElNumber + this.leptonElNumber;
            var totalLeptonMuNumber = particle.leptonMuNumber + this.leptonMuNumber;
            var totalLeptonTauNumber = particle.leptonTauNumber + this.leptonTauNumber;

            //Result list
            var resultList = new List<Particle>(particles);

            //Loop to remove incompatible results
            foreach (Particle p in resultList.ToList())
            {
                if (p.mass != totalMass || p.charge != totalCharge || p.baryonNumber != totalBaryonNumber || p.charm != totalCharm || p.strangeness != totalStrangeness || p.topness != totalTopness || p.bottomness != totalBottomness || p.leptonElNumber != totalLeptonElNumber || p.leptonMuNumber != totalLeptonMuNumber || p.leptonTauNumber != totalLeptonTauNumber)
                {
                    resultList.Remove(p);
                }
            }
            
            //Loop to print remaining possible particles
            foreach (Particle p in resultList.ToList())
            {
                WriteLine("\n" + p.name + " is a possible resulting particle.");
                ReadKey();
            }
            if (resultList.Count == 0)
            {
                double energyRelease = totalMass * speedOfLight * speedOfLight;
                Write("\nThere are no possible particles generated by this collision, however, " + energyRelease + " Joules of energy is released.");
                ReadKey();
            }
            return particles;
        }
    }
}
